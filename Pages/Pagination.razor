@page "/pagination"

@using System.Net.Http

@inject HttpClient client

@using Newtonsoft.Json;
@using System.Data

<div class="container-fluid">

    <div class="row justify-content-center" style="margin-bottom:50px">
        <h3 class="text-center">Store Apps - First Ten Records</h3>
    </div>

    <div class="row" style="margin:25px;">
        @if (StoreApps != null)
        {
            <table class="table table-bordered table-striped">
                <thead class="thead-dark">
                    <tr>
                        <th>Id</th>
                        <th>Name</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var storeapp in StoreApps)
                    {
                        <tr class="justify-content-center">
                            <td>@storeapp.Id</td>
                            <td>@storeapp.Name</td>
                        </tr>
                    }

                </tbody>
            </table>
        }

        @if (!StoreApps.Any())
        {
            <div class="justify-content-center">
                <h5>No records to show</h5>
            </div>
        }
    </div>

    <div>
        <button type="button" @onclick="PrevCount">Prev</button>
        <button type="button" @onclick="NextCount">Next</button>
        <p>@error</p>
    </div>
</div>

@code {

    string responseBody = "";
    List<StoreApp> StoreApps = new List<StoreApp>();

    //Intial API Response
    protected override async Task OnInitializedAsync()
    {
        var apiName = "api/StoreApps/GetPage/0";
        var httpResponse = await client.GetAsync(apiName);

        if (httpResponse.IsSuccessStatusCode)
        {
            responseBody = await httpResponse.Content.ReadAsStringAsync();
            StoreApps = JsonConvert.DeserializeObject<List<StoreApp>>(responseBody);
            StateHasChanged();
        }
    }

    //Gets the next page for Nav
    public async Task GetPageAsync(int start)
    {
        var apiName = "api/StoreApps/GetPage/";
        apiName += currentCount.ToString();
        var httpResponse = await client.GetAsync(apiName);

        if (httpResponse.IsSuccessStatusCode)
        {
            responseBody = await httpResponse.Content.ReadAsStringAsync();
            StoreApps = JsonConvert.DeserializeObject<List<StoreApp>>(responseBody);
            StateHasChanged();
        }
    }

    //Variables for nav funtions
    private int currentCount = 0;
    private string error = "";

    //Move to next set of records
    private void NextCount()
    {
        if (currentCount + 25 < int.MaxValue)
        {
            currentCount = currentCount + 25;
            var responce = GetPageAsync(currentCount);
        }
        else
        {
            error = "The limit of the database";
        }
    }

    //Move to previous set of records
    private void PrevCount()
    {
        if (currentCount - 25 >= 0)
        {
            currentCount = currentCount - 25;
            var responce = GetPageAsync(currentCount);
        }
        else
        {
            error = "Cant go below zero";
        }
    }

}


