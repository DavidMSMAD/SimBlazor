@page "/barchart"

@using System.Net.Http

@inject HttpClient client

@using Newtonsoft.Json
@using System.Data


<head>
    <style>
        {
            box-sizing: border-box
        }

        .container {
            width: 100%; 
            background-color: #ddd; 
        }

        .format {
            text-align: right; 
            padding-top: 10px; 
            padding-bottom: 10px; 
            color: white; 
        }

        .bar {
            background-color: #28E5FF;
        }
        
    </style>
</head>

<h1>Bar Chart</h1>
<div>
    <select @onchange=@GetBarChart>
        <option selected disabled="true">-- Select Category --</option>
        @foreach (var item in listCategory)
        {
            <option value="@item.Name">@item.Name</option>
        }
    </select>

    <div class="chart" style="margin:50px">
        @if (BarChartValues != null)
        {
            <h3>@getChart</h3>
            <div class="form-control">
                @foreach (var value in BarChartValues)
                {
                    <div>
                        <div class="container">
                            <h4>@value.Value</h4><div class="format bar" style="width:calc(@value.Count*5px);">@value.Count</div>
                        </div>
                    </div>
                }
            </div>
        }
    </div>

    @if (!BarChartValues.Any())
    {
        <div>
            <h5>No records to show</h5>
        </div>
    }
    
</div>

@code {

    string responseBody = "";
    List<BarChartModel> BarChartValues = new List<BarChartModel>();
    List<NameModel> listCategory = new List<NameModel>();

    public async Task GetBarChartAsync(string category)
    {
        var apiName = "api/StoreApps/BarChart?category=";
        apiName += category;
        var httpResponse = await client.GetAsync(apiName);

        if (httpResponse.IsSuccessStatusCode)
        {
            responseBody = await httpResponse.Content.ReadAsStringAsync();
            BarChartValues = JsonConvert.DeserializeObject<List<BarChartModel>>(responseBody);
            StateHasChanged();
        }

    }

    public string getChart = "";

    async void GetBarChart(ChangeEventArgs change)
    {
        getChart = change.Value.ToString();
        await GetBarChartAsync(getChart);

    }

    protected override async Task OnInitializedAsync()
    {
        var apiName = "api/StoreApps/CategoryNames";
        var httpResponse = await client.GetAsync(apiName);

        if (httpResponse.IsSuccessStatusCode)
        {
            responseBody = await httpResponse.Content.ReadAsStringAsync();
            listCategory = JsonConvert.DeserializeObject<List<NameModel>>(responseBody);
            StateHasChanged();
        }
    }

}
